{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "CarDamage_classification.ipynb",
      "provenance": [],
      "mount_file_id": "17_pm_01F0AV5VMbmT-ljEo57lQyooUZx",
      "authorship_tag": "ABX9TyPlJBn0/49f5TQVq13V3rQ0",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/prathamsss/Car-Damage-Project/blob/master/CarDamage_classification.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rsNWxhpIfsVd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "! add-apt-repository ppa:graphics-drivers/ppa\n",
        "! apt update\n",
        "! apt install nvidia-384 nvidia-384-dev\n",
        "! apt-get install g++ freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libglu1-mesa libglu1-mesa-dev"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XDel5ES_fwu7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        },
        "outputId": "aae742ff-6769-47a6-ce6f-2eb5ad9f6643"
      },
      "source": [
        "! nvidia-smi"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Tue Jun  2 10:06:58 2020       \n",
            "+-----------------------------------------------------------------------------+\n",
            "| NVIDIA-SMI 440.82       Driver Version: 418.67       CUDA Version: 10.1     |\n",
            "|-------------------------------+----------------------+----------------------+\n",
            "| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n",
            "| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n",
            "|===============================+======================+======================|\n",
            "|   0  Tesla P100-PCIE...  Off  | 00000000:00:04.0 Off |                    0 |\n",
            "| N/A   34C    P0    32W / 250W |   2053MiB / 16280MiB |      0%      Default |\n",
            "+-------------------------------+----------------------+----------------------+\n",
            "                                                                               \n",
            "+-----------------------------------------------------------------------------+\n",
            "| Processes:                                                       GPU Memory |\n",
            "|  GPU       PID   Type   Process name                             Usage      |\n",
            "|=============================================================================|\n",
            "+-----------------------------------------------------------------------------+\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F8rhvDujf1bW",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "!gcc -v\n",
        "!apt install gcc-6\n",
        "!apt install g++-6"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tT-3b_37f2ZN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "!wget https://developer.nvidia.com/compute/cuda/9.2/Prod/local_installers/cuda-repo-ubuntu1710-9-2-local_9.2.88-1_amd64\n",
        "!wget https://developer.nvidia.com/compute/cuda/9.2/Prod/patches/1/cuda-repo-ubuntu1710-9-2-local-cublas-update-1_1.0-1_amd64"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TQCcuigaf50C",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 99
        },
        "outputId": "8cf4e90e-9e18-47ff-edc9-b69723737cd5"
      },
      "source": [
        "!dpkg -i cuda-repo-ubuntu1710-9-2-local_9.2.88-1_amd64"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Selecting previously unselected package cuda-repo-ubuntu1710-9-2-local.\n",
            "(Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 145506 files and directories currently installed.)\n",
            "Preparing to unpack cuda-repo-ubuntu1710-9-2-local_9.2.88-1_amd64 ...\n",
            "Unpacking cuda-repo-ubuntu1710-9-2-local (9.2.88-1) ...\n",
            "Setting up cuda-repo-ubuntu1710-9-2-local (9.2.88-1) ...\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G2f5rM6lf9RA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        },
        "outputId": "6f51625b-fa69-41c5-ce3f-007f98366ed2"
      },
      "source": [
        "!apt-key add /var/cuda-repo-9-2-local/7fa2af80.pub"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "OK\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YysVH5G2gAIk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "!apt-get update\n",
        "!apt-get install cuda\n",
        "!dpkg -i cuda-repo-ubuntu1710-9-2-local-cublas-update-1_1.0-1_amd64"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zEYRdf1hgD7t",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "!ls\n",
        "!apt-get install nvidia-cuda-toolkit\n",
        "!nvcc --version\n",
        "!apt-get install cmake\n",
        "!git clone https://github.com/ShimaaElabd/CUDA-GPU-Contrast-Enhancement.git"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X0pkcqf7gM0T",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "%cd CUDA-GPU-Contrast-Enhancement\n",
        "!mkdir build\n",
        "%cd build\n",
        "!ls /usr/local/cuda-9.2/samples/common/inc\n",
        "! export CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-9.2/\n",
        "!cmake -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-9.2/ ..\n",
        "!make\n",
        "!ls"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VZZoHsnAgP3l",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        },
        "outputId": "b5b6a362-e841-4b82-de9d-44c28e7749bd"
      },
      "source": [
        "import torch\n",
        "torch.cuda.is_available()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l1GjrEl2F6w7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        },
        "outputId": "425be93c-933c-4dca-9b0a-ad5ec14827a6"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sb\n",
        "import cv2\n",
        "\n",
        "import torch\n",
        "from torch import nn\n",
        "from torch import optim\n",
        "import torch.nn.functional as F\n",
        "from torchvision import datasets, transforms, models\n",
        "from __future__ import print_function, division\n",
        "\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from torch.autograd import Variable\n",
        "import numpy as np\n",
        "import torchvision\n",
        "from torchvision import datasets, models, transforms\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "import os\n",
        "import seaborn as sns\n",
        "plt.ion()\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from PIL import Image\n",
        "import matplotlib.pyplot as plt\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "from torch.autograd import Variable\n",
        "#import torch.utils.data as data\n",
        "#from torch.utils.data import Dataset\n",
        "from torchvision import transforms, datasets\n",
        "from torch.utils.data import DataLoader, Dataset\n",
        "import os\n",
        "%matplotlib inline\n",
        "#mounting google drive to access the dataset from drive folder\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "from __future__ import print_function, division\n",
        "\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from torch.optim import lr_scheduler\n",
        "import numpy as np\n",
        "import torchvision\n",
        "from torchvision import datasets, models, transforms\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "import os\n",
        "import copy\n",
        "\n",
        "plt.ion() "
      ],
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_ABFnkAefv35",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import os\n",
        "os.environ['KAGGLE_USERNAME'] = \"pratham2307\"\n",
        "\n",
        "os.environ['KAGGLE_KEY'] = \"97f467d91f0532c14b98141d6e817386\"\n",
        "\n",
        "!kaggle datasets download -d anujms/car-damage-detection\n",
        "!unzip /content/car-damage-detection.zip\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fji0nT8RGCjE",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "outputId": "56b6f3c5-9aab-49fb-9185-0d6ec5119ef1"
      },
      "source": [
        "'''train_dir = '/content/data1a/train/'\n",
        "valid_dir = '/content/data1a/val/'\n",
        "\n",
        "\n",
        "\n",
        "training_transforms = transforms.Compose([transforms.RandomResizedCrop(size=256, scale=(0.8, 1.0)),\n",
        "        transforms.RandomRotation(degrees=15),\n",
        "        transforms.ColorJitter(),\n",
        "        transforms.RandomHorizontalFlip(),\n",
        "        transforms.CenterCrop(size=224),  # Image net standards\n",
        "        transforms.ToTensor(),\n",
        "        transforms.Normalize([0.485, 0.456, 0.406],\n",
        "                             [0.229, 0.224, 0.225])  # Imagenet standards\n",
        "    ])\n",
        "\n",
        "validation_transforms = transforms.Compose([transforms.RandomResizedCrop(size=256, scale=(0.8, 1.0)),\n",
        "        transforms.RandomRotation(degrees=15),\n",
        "        transforms.ColorJitter(),\n",
        "        transforms.RandomHorizontalFlip(),\n",
        "        transforms.CenterCrop(size=224),  # Image net standards\n",
        "        transforms.ToTensor(),\n",
        "        transforms.Normalize([0.485, 0.456, 0.406],\n",
        "                             [0.229, 0.224, 0.225])  # Imagenet standards\n",
        "    ])\n",
        "\n",
        "testing_transforms = transforms.Compose([transforms.Resize(256),\n",
        "                                         transforms.CenterCrop(224),\n",
        "                                         transforms.ToTensor()\n",
        "                                         ])\n",
        "\n",
        "# TODO: Load the datasets with ImageFolder\n",
        "training_dataset = datasets.ImageFolder(train_dir, transform=training_transforms)\n",
        "validation_dataset = datasets.ImageFolder(valid_dir, transform=validation_transforms)\n",
        "testing_dataset = datasets.ImageFolder(valid_dir, transform=testing_transforms)\n",
        "\n",
        "# TODO: Using the image datasets and the trainforms, define the dataloaders\n",
        "train_loader = torch.utils.data.DataLoader(training_dataset, batch_size=64, shuffle=True)\n",
        "validate_loader = torch.utils.data.DataLoader(validation_dataset, batch_size=64)\n",
        "test_loader = torch.utils.data.DataLoader(testing_dataset, batch_size=64)\n",
        "use_gpu = torch.cuda.is_available()\n",
        "\n",
        "\n",
        "class_names = training_dataset.classes\n",
        "class_names'''"
      ],
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "\"train_dir = '/content/data1a/train/'\\nvalid_dir = '/content/data1a/val/'\\n\\n\\n\\ntraining_transforms = transforms.Compose([transforms.RandomResizedCrop(size=256, scale=(0.8, 1.0)),\\n        transforms.RandomRotation(degrees=15),\\n        transforms.ColorJitter(),\\n        transforms.RandomHorizontalFlip(),\\n        transforms.CenterCrop(size=224),  # Image net standards\\n        transforms.ToTensor(),\\n        transforms.Normalize([0.485, 0.456, 0.406],\\n                             [0.229, 0.224, 0.225])  # Imagenet standards\\n    ])\\n\\nvalidation_transforms = transforms.Compose([transforms.RandomResizedCrop(size=256, scale=(0.8, 1.0)),\\n        transforms.RandomRotation(degrees=15),\\n        transforms.ColorJitter(),\\n        transforms.RandomHorizontalFlip(),\\n        transforms.CenterCrop(size=224),  # Image net standards\\n        transforms.ToTensor(),\\n        transforms.Normalize([0.485, 0.456, 0.406],\\n                             [0.229, 0.224, 0.225])  # Imagenet standards\\n    ])\\n\\ntesting_transforms = transforms.Compose([transforms.Resize(256),\\n                                         transforms.CenterCrop(224),\\n                                         transforms.ToTensor()\\n                                         ])\\n\\n# TODO: Load the datasets with ImageFolder\\ntraining_dataset = datasets.ImageFolder(train_dir, transform=training_transforms)\\nvalidation_dataset = datasets.ImageFolder(valid_dir, transform=validation_transforms)\\ntesting_dataset = datasets.ImageFolder(valid_dir, transform=testing_transforms)\\n\\n# TODO: Using the image datasets and the trainforms, define the dataloaders\\ntrain_loader = torch.utils.data.DataLoader(training_dataset, batch_size=64, shuffle=True)\\nvalidate_loader = torch.utils.data.DataLoader(validation_dataset, batch_size=64)\\ntest_loader = torch.utils.data.DataLoader(testing_dataset, batch_size=64)\\nuse_gpu = torch.cuda.is_available()\\n\\n\\nclass_names = training_dataset.classes\\nclass_names\""
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HlkZjzdJTpBN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data_transforms = {\n",
        "    'train': transforms.Compose([\n",
        "        transforms.RandomResizedCrop(224),\n",
        "        transforms.RandomHorizontalFlip(),\n",
        "        transforms.ToTensor(),\n",
        "        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n",
        "    ]),\n",
        "    'val': transforms.Compose([\n",
        "        transforms.Resize(256),\n",
        "        transforms.CenterCrop(224),\n",
        "        transforms.ToTensor(),\n",
        "        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n",
        "    ]),\n",
        "}\n",
        "\n",
        "data_dir = '/content/data1a'\n",
        "image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),\n",
        "                                          data_transforms[x])\n",
        "                  for x in ['train', 'val']}\n",
        "dataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=4,\n",
        "                                             shuffle=True, num_workers=4)\n",
        "              for x in ['train', 'val']}\n",
        "dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}\n",
        "class_names = image_datasets['train'].classes\n"
      ],
      "execution_count": 115,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A1fj5u1UTpHc",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        },
        "outputId": "b5286d36-6460-4a46-ff05-5770f8742cd0"
      },
      "source": [
        ""
      ],
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['00-damage', '01-whole']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LoSiOcRTCAXk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n"
      ],
      "execution_count": 116,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YTADTOcbBTyd",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 186
        },
        "outputId": "85b42047-e4fa-479b-99be-bde2b486f5b5"
      },
      "source": [
        "len(validate_loader)\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# functions to show an image\n",
        "\n",
        "\n",
        "def imshow(img):\n",
        "    img = img / 2 + 0.5     # unnormalize\n",
        "    npimg = img.numpy()\n",
        "    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n",
        "    plt.show()\n",
        "\n",
        "\n",
        "# get some random training images\n",
        "dataiter = iter(dataloaders['train'])\n",
        "images, labels = dataiter.next()\n",
        "print(images.shape,labels.shape)\n",
        "# show images\n",
        "imshow(torchvision.utils.make_grid(images))\n",
        "# print labels\n",
        "print(' '.join('%5s' % training_dataset.classes[labels[j]] for j in range(4)))"
      ],
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "torch.Size([4, 3, 224, 224]) torch.Size([4])\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "00-damage 01-whole 00-damage 00-damage\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Sn6Ub6dsK_Z1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def train_model(model, criterion, optimizer, scheduler, num_epochs=25):\n",
        "    since = time.time()\n",
        "\n",
        "    best_model_wts = copy.deepcopy(model.state_dict())\n",
        "    best_acc = 0.0\n",
        "\n",
        "    for epoch in range(num_epochs):\n",
        "        print('Epoch {}/{}'.format(epoch, num_epochs - 1))\n",
        "        print('-' * 10)\n",
        "\n",
        "        # Each epoch has a training and validation phase\n",
        "        for phase in ['train', 'val']:\n",
        "            if phase == 'train':\n",
        "                model.train()  # Set model to training mode\n",
        "            else:\n",
        "                model.eval()   # Set model to evaluate mode\n",
        "\n",
        "            running_loss = 0.0\n",
        "            running_corrects = 0\n",
        "\n",
        "            # Iterate over data.\n",
        "            for inputs, labels in dataloaders[phase]:\n",
        "                inputs = inputs.to(device)\n",
        "                labels = labels.to(device)\n",
        "\n",
        "                # zero the parameter gradients\n",
        "                optimizer.zero_grad()\n",
        "\n",
        "                # forward\n",
        "                # track history if only in train\n",
        "                with torch.set_grad_enabled(phase == 'train'):\n",
        "                    outputs = model(inputs)\n",
        "                    _, preds = torch.max(outputs, 1)\n",
        "                    loss = criterion(outputs, labels)\n",
        "\n",
        "                    # backward + optimize only if in training phase\n",
        "                    if phase == 'train':\n",
        "                        loss.backward()\n",
        "                        optimizer.step()\n",
        "\n",
        "                # statistics\n",
        "                running_loss += loss.item() * inputs.size(0)\n",
        "                running_corrects += torch.sum(preds == labels.data)\n",
        "            if phase == 'train':\n",
        "                scheduler.step()\n",
        "\n",
        "            epoch_loss = running_loss / dataset_sizes[phase]\n",
        "            epoch_acc = running_corrects.double() / dataset_sizes[phase]\n",
        "\n",
        "            print('{} Loss: {:.4f} Acc: {:.4f}'.format(\n",
        "                phase, epoch_loss, epoch_acc))\n",
        "\n",
        "            # deep copy the model\n",
        "            if phase == 'val' and epoch_acc > best_acc:\n",
        "                best_acc = epoch_acc\n",
        "                best_model_wts = copy.deepcopy(model.state_dict())\n",
        "\n",
        "        print()\n",
        "\n",
        "    time_elapsed = time.time() - since\n",
        "    print('Training complete in {:.0f}m {:.0f}s'.format(\n",
        "        time_elapsed // 60, time_elapsed % 60))\n",
        "    print('Best val Acc: {:4f}'.format(best_acc))\n",
        "\n",
        "    # load best model weights\n",
        "    model.load_state_dict(best_model_wts)\n",
        "    return model"
      ],
      "execution_count": 119,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bJ1deIKcVR9T",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from matplotlib.pyplot import figure\n",
        "\n",
        "def visualize_model(model, num_images=6):\n",
        "    was_training = model.training\n",
        "    model.eval()\n",
        "    images_so_far = 0\n",
        "    figsize=(20,40)\n",
        "    fig = plt.figure()\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for i, (inputs, labels) in enumerate(dataloaders['val']):\n",
        "            inputs = inputs.to(device)\n",
        "            labels = labels.to(device)\n",
        "\n",
        "            outputs = model(inputs)\n",
        "            _, preds = torch.max(outputs, 1)\n",
        "\n",
        "            for j in range(inputs.size()[0]):\n",
        "                images_so_far += 1\n",
        "                ax = plt.subplot(num_images//2, 2, images_so_far)\n",
        "                ax.axis('off')\n",
        "                ax.set_title('predicted: {}'.format(class_names[preds[j]]))\n",
        "                imshow(inputs.cpu().data[j])\n",
        "\n",
        "                if images_so_far == num_images:\n",
        "                    model.train(mode=was_training)\n",
        "                    return\n",
        "        model.train(mode=was_training)"
      ],
      "execution_count": 185,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "I-KBiFTXgsKP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model_ft = models.resnet18(pretrained=True)\n",
        "num_ftrs = model_ft.fc.in_features\n",
        "# Here the size of each output sample is set to 2.\n",
        "# Alternatively, it can be generalized to nn.Linear(num_ftrs, len(class_names)).\n",
        "model_ft.fc = nn.Linear(num_ftrs, 2)\n",
        "\n",
        "model_ft = model_ft.to(device)\n",
        "\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "\n",
        "# Observe that all parameters are being optimized\n",
        "optimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)\n",
        "\n",
        "# Decay LR by a factor of 0.1 every 7 epochs\n",
        "exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)"
      ],
      "execution_count": 121,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r7hGDUBWhD-d",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 462
        },
        "outputId": "edf37244-ba83-45aa-c740-b805feb1b488"
      },
      "source": [
        "model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,\n",
        "                       num_epochs=5)\n"
      ],
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 0/4\n",
            "----------\n",
            "train Loss: 0.6347 Acc: 0.7391\n",
            "val Loss: 0.2509 Acc: 0.8913\n",
            "\n",
            "Epoch 1/4\n",
            "----------\n",
            "train Loss: 0.5138 Acc: 0.7880\n",
            "val Loss: 0.2354 Acc: 0.9022\n",
            "\n",
            "Epoch 2/4\n",
            "----------\n",
            "train Loss: 0.5496 Acc: 0.7832\n",
            "val Loss: 0.4064 Acc: 0.8130\n",
            "\n",
            "Epoch 3/4\n",
            "----------\n",
            "train Loss: 0.4735 Acc: 0.8087\n",
            "val Loss: 0.2444 Acc: 0.8935\n",
            "\n",
            "Epoch 4/4\n",
            "----------\n",
            "train Loss: 0.5206 Acc: 0.7891\n",
            "val Loss: 0.2018 Acc: 0.9065\n",
            "\n",
            "Training complete in 2m 41s\n",
            "Best val Acc: 0.906522\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rvZPdN3WPSc2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "visualize_model(model_ft)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lzeKdjzdPhi2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model_conv = torchvision.models.resnet18(pretrained=True)\n",
        "for param in model_conv.parameters():\n",
        "    param.requires_grad = False\n",
        "\n",
        "# Parameters of newly constructed modules have requires_grad=True by default\n",
        "num_ftrs = model_conv.fc.in_features\n",
        "model_conv.fc = nn.Linear(num_ftrs, 2)\n",
        "\n",
        "model_conv = model_conv.to(device)\n",
        "\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "\n",
        "# Observe that only parameters of final layer are being optimized as\n",
        "# opposed to before.\n",
        "optimizer_conv = optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)\n",
        "\n",
        "# Decay LR by a factor of 0.1 every 7 epochs\n",
        "exp_lr_scheduler = lr_scheduler.StepLR(optimizer_conv, step_size=7, gamma=0.1)"
      ],
      "execution_count": 124,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RqHJXaADQFev",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 462
        },
        "outputId": "0c92cf84-49c4-46a0-e6d0-a0b8f57a6e5f"
      },
      "source": [
        "model_conv = train_model(model_conv, criterion, optimizer_conv,\n",
        "                         exp_lr_scheduler, num_epochs=5)"
      ],
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 0/4\n",
            "----------\n",
            "train Loss: 0.5598 Acc: 0.7587\n",
            "val Loss: 0.4462 Acc: 0.8000\n",
            "\n",
            "Epoch 1/4\n",
            "----------\n",
            "train Loss: 0.6053 Acc: 0.7565\n",
            "val Loss: 0.3463 Acc: 0.8500\n",
            "\n",
            "Epoch 2/4\n",
            "----------\n",
            "train Loss: 0.5510 Acc: 0.7663\n",
            "val Loss: 0.2309 Acc: 0.9065\n",
            "\n",
            "Epoch 3/4\n",
            "----------\n",
            "train Loss: 0.5997 Acc: 0.7728\n",
            "val Loss: 0.3421 Acc: 0.8739\n",
            "\n",
            "Epoch 4/4\n",
            "----------\n",
            "train Loss: 0.5976 Acc: 0.7832\n",
            "val Loss: 0.3109 Acc: 0.8783\n",
            "\n",
            "Training complete in 1m 29s\n",
            "Best val Acc: 0.906522\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oK9RLZOsQRBt",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 679
        },
        "outputId": "cd14f02a-3f77-414a-f11a-6c012a5a67be"
      },
      "source": [
        "visualize_model(model_conv)\n",
        "\n",
        "plt.ioff()\n",
        "plt.show()"
      ],
      "execution_count": 184,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIYAAABeCAYAAADmFGzTAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO29eZheR33n+6mzv1u/3W/vrc3abEmWbNkyXrEBY0MwjgnDToAA4TLM5GaSTGYmQ3KfzALcZObeZ24WJg8zDxnIwm4gEIxZAvGCZSPvtqzFUmtpqffl7Xc9a1XdP85puS1asgwYvzPT3+dp6ZxT9Z5TVed7fvWrX/3qV0JrzSpWcTaMl7sAq+hMrBJjFStilRirWBGrxFjFilglxipWxCoxVrEiXnZiCCFOCCFuyY5/Xwjx6V/AM18thDj9Uj/nZ4EQ4rNCiI//lL+9RwjxoZ/l+S87MZZDa/1/a61fsEI/S6P9NBBCXCSE+EchRFsIcWiJyFnaTiHEd4UQc0KI/2WMQj9XYgghrJ/n/ToIXwAeB3qBPwDuFEL0Z2kx8GXg11+msr000Fqf9w84AXwUOABUgc8AXpb2auA08HvAFPA3pGT7t8AoME/aaJVl93svcDJL+4Ps/rdkaf8e+NtleV8J7AUWgVPA+4EPk76MCGgCf5/lHQG+CswCx4F/sew+OeCzWfkPAP8aOP1Cdc9+ezEQAqVl1+4HPnJWvi1pc573Xh7gA33Z+R8ACdCVnX8M+JPs+LPAfwXuAhrAj4HNy+51PfAwUMv+v35Z2j3Ah5adfxA4mNX/u8CGF6z3BRJjP7AOqAAPAB9fRowE+E+Am72A3wIeAtZm1/4b8IUs/47sZd6Upf2X7Pc/QQxgQ9Yg7wJs0q9197JG+/iyMhrAo8AfAg6wCTgGvD5L/+PsZVayeuxfTgzgL4C/OEf93wwcPOvaJ4E/f7HEyPLdB7wlO/4e6Qf0hmVpb15Wx3ngasACPgd8MUurZC/5vVnau7Lz3rOJAbwJOApsz/L+X8DenxcxPrLs/DZgdBkxIjIJkl07CLx22fkw6RduZS/ui8vSCtnvVyLGR4Gvn6NMZxPjGmDsrDwfBT6THR8DfmlZ2oe5cInxXuChs659AvjsT0mMjwF/lrXHFOmH9Mc8J02WXu5ngU+f1e6HlpVp31n3fRB4/wrEuBv49bM+ojYvIDUuVMc4tez4JKnYXsKs1jpYdr4B+LoQYlEIsUhKFAkMZr87cy+tdYv0q1gJ60i/pgvBBmBk6ZnZc38/eyZnPzerw4WiCXSdda2LVJqdF0KIXxVCNLO/u7PL95J+UFcCTwPfB14FXAsc1Vovb4+pZcdtoJgdj6xQh5PAmhWKsQH402XtsgCIc+Q9gwslxrplx+uBiWXnZ2vip0hFY/eyP09rPQ5MLr+XECJP2kWshFPA5nOkrfTM42c9s6S1vi1Lf95zszpcKJ4BNgkhSsuuXZ5dPy+01p/TWhezvzdkl/cCl5B2UfdqrQ9k5bmNlDQXggnSF74c64HxFfKeAv7pWW2T01rvPd8DLpQYvyGEWCuEqJAqTF86T95PAZ8QQmwAEEL0CyHelKXdCdwuhHilEMIB/uN5yvA54BYhxNuFEJYQolcIsTtLmybVI5awD2gIIX5PCJETQpjZMPIVWfqXgY8KIXqEEGuB37zAeqO1fhZ4Avh3QghPCPFm4DJSRReRwiPVbcjyuOe5X5tUH/oNniPCXuAjXDgxvg1cLIR4d9Y27yDV3761Qt5Pkdb90qx8ZSHE217oARdKjM+TKkrHSMX7+WwIfwp8E/ieEKJBqoheA6C1foa0QT5P+hVXSUc1PwGt9RjpV/S7pOLvCdIvFeAvgR2ZePw7rbUEbgd2k45I5oBPA+Us/38gFbXHs3r8zfJnCSE+JYT41Hnq9E7gqqy8fwy8VWs9m6VtINUNliSIDxw+z70gJYBNSuil8xKp8vmCyLqb20nbZh74N8DtWuu5FfJ+nXRw8EUhRJ1U8X7D2fnOhsgUknNnEOIEqSLzDxdS6FX8r4GOsnyuonOwSoxVrIgX7EpW8b8nViXGKlbEKjFWsSI6ajZ05WlrgQD0T9i0Oh1pqV8MtNbipSnLi0dHEWNl/M9HiRQvhhgGGM5LWZgXjdWu5KWCaZGS44VhmCaWdU5j6cuCVWK8VNCCC21eJSU6CV/a8rxI/G9BDIML/XbPjRf7e2GYXHhXopAqeOFsv0B0FDGK5ZEXzvRzgMDk/K9aYNkFDGECaSO5gI2BkSnDjjDwsvSVYBkmnCe909FRBq5/+cl79d//1X9i9NHvorX6Ge8mQNiAkyp2ppWKd8vCEBb5ch9aNfEcB8dy8GwXQycEoc9CdYae3k14hW56exwKXgnTtLCFgUYSI7DQNNs1Wn5AGLSJgjZ+GKOxEJhE2iX0A5LAR8kYrRUShVYJOqkjTIdcIYdWPmGrgZI+WqvVUclKGNi2lQ/84Z/yPz7+W4zuu/uFf8Bz373OzkR2RWNgmAVyxSEqA+spV/op5LowCwVipfBsi2K5RLm3h5xXIGe7mJaBlIpDB55i1+4r6R0coa+nSKmri3J3N5YNhpYoYSKExBQKIo3ngBAa0zaxAUsIEhnTaoU06i3qtTr1dpP5RpvpsRlGT4wyPr5IaWQte/bsxtQtHrv3ey9Bi/706ChizM9O0VVyedM//wP+emGRudFHQMcr5jVNi+7yAGvWbqHc24uby9HV08/wwCCl7jJTczVm59vU6m0atXkKXT309w9SGRiiXKnQPzxEoVzEcx1M4WIYBhiCsNlibn6Oy19xHZZtY1ppE7UiINQkiSIKfZIkwhKajcMldm7tpdtNdQo/VkxWQ9pxAa9bU1lnkiBQWqJUAspA4RCGPs0gIVfwMG3FW9735l9cQ18AOooY//j1bxEtVrEKFZyui8E8AckiECLQWAKkhp7uQezSAPmNOxEjm5kJmkw8fB87rhomN1QmSiwWE4PK+vVcvm4tI2vX0tPfT75QRhgOiVSEcYRKIgwEUqbdlhKpt83u627AtG00gjgBBUgVo5KQJAqRcUx/b5FrtvezrtfBFAKN5thkk2qYMFgpIFWbw6NjnD49zeJCnSiR2Kait7+PQrEHLQS5gkOPOUi324PldJY+0lE6xu//j2M68tvUFqoszk2wMD/HwvQss9MnaMyepN2YYs1QN+suvpxH9t1Hedsu8l0VhgeG6LccRjZsojLSx9DafjZvXk++u4hhmEgNWgMCDCsllx+CCiGJQSuNVBoBJO2QhWqd3r4yMpJEUUjo+zTqdZrVGo4WXL3nIq7b0U/eNhBCIJXmyWOzFAoeiSX4yjf3ct8j+2m2A2zLwjQctG0QNRo884O/Rzvd9I2sY93WS0C16auUuXT7Fj7xkds7RsfoKGJsueo9WgYtWq0mQscIAVIZRFKnSp1hYpkSFS2wef161mzZRaF3kO27d7L9sq30jfQhPBslQEuBFmCaYFlgmWBbII1UHwkCaC1q/CYgIEk0SoCKYppBgFfuIvEj8p5k8vg4Rx7fT393kXe+4RVsW1/GMDJdRmueGp3D9iyaMuHP/vZu2mYRUSpiJxELpyYxLBMDQRDHHH/wfk4+8wxe3yA3vunNeD19yCQirNX5/p98uGOI0VFdyRWXbUALk3LfAN/96pcIWotYZoKLSRLHhIGPNG3e+sHfZv2mLQjP49IrtzG4bhBlCKQUyBC0AtsBrwCODYh0uGmQdgsasDxNTSqagURoiKMIYZsIAUEQ0/IXkFHA+PQxRg+cYMfmtbz/zdcw0J1DiCUFFybmW/hBjFNy+c9//jVqUcJ7f+cO8t0FbKDVDgkjhY4TRBzzLddh/MDD+HPTPPvEY+x6zWtxPAvTOtsR/eVFRxHj9/7dvyZsN7nz7+4BGsxP7QcEwsxjOzkGh0fYff0dOIVeEtvBsi3Kff2EoUGSTU1owDA0sYS4CkKnK5oEiq6igZNLR631NszOtQljhZKKwPeRSqFlQq3lEzWbzJ08RnV2ltfdeCW/dtsrKOasM6QAiGLJsyfn2H7xEB/7r1/m8OFDCNvh2NFTXH3DpZQcg76SjQL8BLoNzfiNl/Ojb65n5sgJxp96kuGtW+nqH8E0O8qk1FnE+OaXP0/UCjl9YhzXK5EvDYPhkCsNcsvt72B4/WbWbNrI2ks2Yrs2M1OzxIkAATL9jyTRaA1KQZxoojhGS4WWigk0+YqN4xq0m5LGQhNMgzCKCAKfOI5JlCJo1hk7dJBgYZ53vvFVvP22q3Ati2WcQGvNkbEFNq7r5at3/SNf+avPUNm8C5Tm4CP7ufmmS8llZYo1xAKUEGzfsYGhi69k9vB+4mrM8f1PcMnVOWy7sybROooYH/u3H037gWz23bY9rrrxNnZe/2qK/RW27bqMvpFhfL9BbbpKpXeASBooqVEa0Jo4VplCqIjimCSKiLQkn8vRavm0JpvYtkWrFVJvNLBMi3a7RRTFaEx8v8H4/qdIanXe+7ZbeOvr9uDYPzliaAUJjSjGweUvPvW3LIwfwxvciOuWOPbMUWbnGowMllGkEss1025seKiLDdsu5sg9XfjVORYOPUV9y6W45Z5fZFO/IDqKGLZtIYRCK8XAmo285o73se7iS+ldsx6vq4jpuczPVVmsL9BV6kUbNmGoicMYKSWJlGitUTrtHpIkIY5CQpVeDwIfP2hgmSbNZkgQBDiWTbPVQiYxSRAxfuAAvl/jQ++8jbe9/ips6ydFvNZweqbJpjUVPnPndxhfCDFzJZpT44iRLczMzLH3gUNcedV2pBYkKqFU9LDQhJbB2i2byA9uxK+eJKqeYPbUKD3uxS9Di58bHUUM0zS49BVv4q2/+kFOTk9hFly614zQjgOimqTZaCAME6+riGGZ1Ft1ZCKJogipJEpptBIpOZQijiKiKCTWCo0m8n1azQYaCMOIRCoSI6LdahL6AZOHD6Fbbd7/7l/i7a/fszIpAIUGYSMci+//YB8iZ2GV+mnNjeH2rQFlcPLIUV79uqtQtiAMJY5rIiVEUrD2khHyvf3MGxpUk+qRR9FK/sLb+3zoKGJU+ga4ZOd2Ht//JMK2GCyMcOLoMQqVLrp7erHcPMIUtOOQMAiwogQVx2h0aoTSGikEoRREYYRMEuIoJhGZQStKUHGCTCR+FKCEJtSCVrXG1NFRklaN97zzdbz79mtwrHMbnJQGw3FpSU2IRRy00VaeuFWj2ZjHzuU5evAgiYyx8y6uYVFvxMhIYeYchtf04lYqmG4B6S/QGj9Aq9pZ0+4dRYx/9YnPMDW3QBLGCEPTaDSJ45jG/ALTximEZWMYBsKxsCyLZrNFGMVs2LgB07TQQpAoTRDGmIaBadlIpYhVjO8HyESiVdrFaKVQcUIctJgaPUbcavL2X3ktH3jLTdgr6BTw3CS6FgLTVDiWzfqNa3lo30MoodC2TXt2Aq9vhMkTp5iZmiEfDuDYMHNqHguD8nAf9bbAK1UQuR7wF0BH4K6OSs6JfKmL7X39OI6L6zrkci4KiTYMbDNBJyG+H9Js1KnXWyws1Flo1mlOnKLdigiCCD+OkYnEME2UbSEMA9PSWJaJMGyEYaFUOt9Rn52lvrCAmUjecOuNfOTdt+LZ9nkn5BWp6bzgGdQaMa9/7Sv5xle+STusg9uFbi4QVwZpNdrc8w9PMLhmBBMYWtOPV84xNz5HFMasGRqmvXUP0XwFIUyswrnWdr886ChilEtdOK6D67gUijk818QtgOVCVwEsBEkMOQcQGinBMRRWogmChHYY0mzHLC62WKg3qC62qS7UqS4uslBvUl0MaDSq+EFA2w8IAx9DwauuvYLf/dAbMzvF+cu45JfVVbSYWWxx/ZVbuP7qa+npzTHU003Ocelet5aCbdM3PESu0J1JmgTRlgwaJkbOY8d73oJ8168gDEHQimgGrZe6eV8UOsok/o0fz2sMC8exyBVcbNugVBKUSoKy9ZwnlkVmvQSczFawpLqd6QT0mX+AdH4kjtNuJEwkTV9Sb7Zp+QHbNvTTXco9z3h1LqTKZ2rHWGxJ6pFmYWGefK5AqeCiDBPDMJCGAkNjCAGGQBkiNdWTjshlVmYdC5IE4hiuqvzMjmY/N3QUMe5+/IQe6O6iq+jhOjZamSgzbVitwLDBFGAZULLAFTzni5U16flaVutsplRzRjJY2Y9ezBs502JaM7Yo6SuaeLZIu5ksPSJ78dmfzNJUZoldyqc0JBLCEC4rrhJjRbzyV/6FLnoeld4ehocG2bB2hHVrh1mzpo/B/hJdhRyubaKEAAQ609dskZJkpVZN7V6aMEnN0pYhyNlgpbf4md6EBhKpmWkohroMDCMlB6QjpLbSaCEQAjSCBE2sU2ImUhNLTSQVQSwJQ8UNQ/mOIUZH6RiF0gB+q86piRkmp+fZf+AonuuSKxTo6irS21thZLCHNWsGWTvYy1BfFz1deSw37WT0Ci/aDxMiaWBbgrILhuAF9YgLwVJPZRmCSsFgqiGpFMw0nKCEZpDwd999hMHBATZtHKIdxNRqAYu1Bn4Q4LdDgjAmihJ83yeMIm74l7f/7AX7OaGjiNFbf5qDjRxdlT4sy8FyHAzbQmmFH4S02xEnTs0zMV3nYGmccrmLocEBNlw0wkVr8/Ra4ide+sJCg55ynoLz063bWCLAUncgFUQqffmhBD/WxAmMna4RJJJCoUQcRazpd9hz+Ram5uv8lz/6Cy66ZAdeqYiME5SUhGGUGtmSJDXQyVUD1znx6FiNYl+RXC6PbVk4joPpWFiOgzBMGvUGYRiQy+cxjEEsK0QYJmEMkU4tkiJb5fdCUuFMF6ohihO0SE3ySot00ktBmECyRIQoJUIUa+IYGo0WSoPteIRhRBQaHDt+gsHePmamZ/jCYw9Tr9XIFcpU+kewLJugFRDHCXEckiRRqvRojW1qOst/q8OI8Svv+XUmZ+epNQOETBCWje055FwLx7YxNXR3d+G6LqYhSKKIwI+pVhexbInsLdCTMyhazznRCNNGSYXf8mnWGtQX68xNzTJ5/Dhjx09x7MhRjk2cwuwd4N//f39GvrubKE6JkchMYVWaJElnbqXU1Gp1mo0GrVYL27bxPI/A96lVa6lyKzQjGzdQCQIKuRKhH+K32iilEGgMLTG0JApjgigkiiKU/Fm94n++6CxivP6V5F0QpoVWionpRcZnZpmarVJtJJBIenq6KXd1USwVKZe76Our0N/v0Z2XWDKhVo154uhh9j/+JKOH93Py0HGcRh1ZX6RUq9JdazEStqkkAUNasR7Fa4BPl3upzn4MvDJxnHYVUmmUTN3+4jgmjhNkGJFEMY7rYBoGMzMzhGGAMAwKxSJB28d2HCzTxRSSRqOOQarYSBUThgFhGCClREqFUgqtFWp1ruTc+J1/80fEwM7LdvKud76FS3Zu4br8xaA0plZMzzV5YP8kWri4nosUgsm5WcYmInQi0Ui+95XPs/8L/40r7DybixW2dvWwXrhsOVZlKKiTo41BRBPJPGlk2jlgzZYdeD391H1IEkkcx0iZ9v9RGCFlQhzHRFGE4TpoLGwNg0NDmJaJm/ewLJPJsQksy0JIDUmCYahUuQyDdEIvDlFSorJAqzKRxElqre0kdBQxao0qiVYcOXyQ//f/+RM2rF/DReuHkJHm5ht3c82u9VxvmDx2ZBHHc7Ftm1zepFRyyOVMJkePcfyuL/B76/awY8eV4Ln02C4u0CNj7EP3AQkBabjjo6Quf3tNi8vf/gHa0iRoN4nCKCWGUsgkIQiCMxFzF6tVcq5FZWANAwMVSiUHyxGYDhgGuOYQ7bZGSkU7bBM2U70iCCJkGCLjMFU4VUoOJeUZl4FOQkcRY9cVe4jjBJBIGTMzN8fk9DRh0Gbfw49w6bYtyCTm0qtfRX+xhOd5FAo2+ZxAo/jif/8UV80tkuQ1ubFJJm2Dpm3iJIJZ22ALCRFpRNSjpKF9J4BnL7mMV930Omr1BnGU+nYolYp53/eJoijVV4RAJgn7DxzkTe+4mOERl3xOIIxUUTWEptydY3ZuBm1oEKAQJDpCJgEyDAjDkDhJUEqdeU4Sx0R6lRjnRLncg2GaOI6BlDGO4+A4HiiBqTTa1Ox/4nG27ZGEQQBotDZRUY7TJ0Y5/PXP80txjejEPk6O53jYzvFeL48tDZ4QIT8kJcMGUoupDdxrWux5xz/DN3PEUZjqElFMuOTLEccopTBNE8/zGFm3lkKhSLngUC5BECgsWzA3U+fgM8c5dXqKyYlJXM/FMgwwDdAarRRxHBMEAUmSpDqGSp2SlFIkqzrGubFYbWJbFqWuPN2VHizLxMvlAAPPspAkbNi8KfPkbiG0REiBDGK++tefpm9+ihLwhKzxHVljNoDhBtgI9mPxGHAFqUlak0aDbe28lh3X34zfqtEO0xFCqmjGqXIoAQGO41Aul+kfqLBl0zCT4zPUFw0s2+XUqXFOna5S7imxafNGensHOD56grbfJPSbCK3TkVEU4idRqnBm0/4y60qUWh2VnBOvveVmjhx+lkSGWJaF7TgIYWBZNpZr4zfalLq6aPtNlM4cbhKb+swp9n7nS+wGfAx2FIZYK3xkq8YprZgEHiaml3SPhtNAC/ixV+B17/stGnFE5EcESUKUxCSZqFcqXRlvWTalUonu7jKVSp6uMgwOrePE0RmeeOwww8M93HHHNbj5HI2G5tTJOcYnpsHU6MinVl08c98kSVIXxERCNipZut5J6ChitAOfjVs3s1hbIAoCTNNMlykLgdbQaraxTJN2q4VSEh1LzNjl3ru+xvaZcW538mzaczMb3v8hunZtZPpr3+L+P/0E7bjNraR7ObikMa+fAMqvfTPd27bRiEKMRJJoecYCqZVOn20Y5HI5iqUipa48lgVJqDn07BhHjpzi2msuYduWfgIFc/MwMVllbGwMIWB+oYoRp0QI/QAZxYhYIrKuRBhGVje9avk8HyZOj2PbBqYNaBOlNGZmrFJK02q16SkVkGFEqDTakUSLMzzyw6/xFiEYXX8l3yv1seHIKG+8ZAOlrRt4V996CpOHyNYd8UOybY6G1vP2t34QFSagJEkiUTI9RmmEVggj9RQrFPJ4rocQJn5bc+T4ccYmZrjt1bvZOFKkrgSLTc3E6XkOP/0046dP0/TbJHFEY34BLSVB1k0pQTrakRKZKbVLimgnoaOIoUk1/FwuR9AOQaVLAYSAIAwJoggZu8SEIBWGhsOPPMTwxHFip8DXFiaJW1O873d/A9vQPHzkEFz1Kq769jGEjFgk3T/qAcvh6nf/M2Q5Txyn8xRKLo0S5JkRiG0a2LaD43qYpkm7FTA9NcPC1DS33Xw5G4fztBDUW5pTJxZ48P572f/4E5w6fpgk9in1DpAvVwhaMYZhoCFVbMMw02EkURhlNo7oZW7956OjiHHbbdcwMT3P9HydSKeNZiQmtm2RRBFmko5GpJRIS+LHbR7/0d28TUnUyGYuvuRSFqptPv/lb6HjNpOnjvGjqs/vmA7dMmIceEwICjf9MuWtlxP6CQKBTOSZvj5VAjWWbWMYFpZtonVCu9WgtVhlcnqaN7z6CjYP52kgqEaa48fn+d5d3+Ifv/UlDj/1AFHQBDSm7bHp0hvoW7MdSGNtBb5Pu9XC93200rhejp7+gdTRpIPQUcR48EePsW3rWl51xSaUZTE932R2ahG/HbFYrWKgM7d/SWImLM7NYB59htcDe7UiSQSmEbN+7SB7rr6CKEx4+gcP8pejD3NR1OQw0LzsRv7Jr/02gTBYXKjiug6GYZIkMUlmfbQsgRA2hmlhaE3YaNCIQmamprn2qu3suKibBEFbaSZO1/juN+/mG3/zSU4eeYzneY3FAcee2YtdGKDU1YPfbhOGIYVikZG1aynk82DYRFpTrc6u2CYvFzqKGEdPTDI2MYMQgu6uAmuG+xkc7iVnlzh1/ARKa1ASlWhiJTn05INcFzQZBCpTJxGFdTx64Psc3P8Qt97+bjZv3cndX/kC6xsLzANT23bzgX/+UeoCVBLhui7NVg2Uie3Y6SSXEChlZh4+MSrS+HHC/OI8Q0N9XL1rHVII6miq8xE/vPs+vvG5P/sJUixBxj7Tpw/jbbmSQqFAd083+Vwew7DRSCKZEEUx7VbzF9za50dHEcN08yzW5jFMSJSi7cccPT6BlgoVxxienYVSEjjAlo0bCOo38pcLM8Tzc3RVx9ix9VqmFmfYd88DHHv0KXZT4xiKcPc1fPB3/pDZQKGaiyhToJTEti0CX9KqVsnlcli2hVIGUkrCKMQPA1qNJrFQ3HDtdlzXoAE0fM2DD+znG1/+DMefXZkUS2gtjBME28+cx3aShniQknqtykJtjla9s5yBO4oY191wHc22z0JtjunJSeZnF0iSBCefo5zLU8w7GKaBic2tN1zCDZf/KkpK2k2f8dET/NEHP8wr45gtd7ybhdosR354Fydb01z2zl/ntvf9Hzw9OonSKo2HITVaKqRUaG1iWia1eo1ioYiRN4njhCRJA6c0m02uuPoyBip5aqGiFWkOH57iG3d+iacf+m7q3XsGPxkROInbmVk9PTcMgyAIqNfrRLGkd2iY7nJnjUo6yufzkeN1HWMxU4uYr0eErRDfr1NvVqlXG9RqTWQS8atvvIabX7EZwxBnXPmk0uy952m+8slPsf+pR1EyZv3l23j7B99P18gm7nvkGeI4QQgjVTRlqmjGcbzsvVpEUYTjurhuDq00od+iq9zNbbffRLk7T+BLqgs+X/3iV/ibT/0H6gvp/nS5Uj9rtl1LLl/m5MFHqM8+e4Ywhp1n/aW3Ynk2lmEQR5owjugfGqFS7mH04OOcOvIoiT/dMRpoR0mMP/nzv2brhrXs2rmFneuHcQr9NMJe6q1hgjCmaGl2ru9muNtN3fKXwRCCV7xyJxdt+SOa9Sblco58Oc++/WPc+8gzmWIpUFohVWrIiqJ0GSOAYZhYwiTveGitCJt1mq0miVRce/21DA6WkBJCDI4e2c8Pv3PnGVIUysPkukbYuesyKr1rGB89hl0YJm5mmxpqCIOQRhBgGBYDg2u4aHiIidFn+dHebxM2x0GvWj7PicnTYyxMT/P0M4cpl3IMDVbYuL8KC/cAAAlgSURBVHEdGy5aw9aRPoZ68uRd64ywXk4NIcBzDNau6yKIixwfr/L9e5/i9OQsKgvCpTILY5KtaY3jOFsZnw5XA79Gs9Gm1aqjlKJSqXDNddcxPLKGel3TbgfMzi7yvbvv4ugz6e6UjteFV+hi7vSTzM5eh+P04NfHsAoVkvYMWsUIwyCREjdf5JJdu5idmmbvP3wRf24MOiwi8BI6ihj1Wh3PdYnjiDDMUW+2GJuYx3vkIMVigb7eCkODvQwNVeirdNPb7VDwHCzTRmtohgmz8y1OnJphcnoOP2oRJQkyiZHZHEUYhvi+T7vdptVsEmR2Ecuy8dwixVKJtevW0F2pUOmpMDg4gN9Op979ts/+p/az7/67icMmYNDVfxELEwcxLZu+gWGmTp9mzZY9tIKQ+dYUUXMWDC81lJkmj/zg2zRmDoNMbR2dio4ixpJoj5PMWyp0U29qz8P3fRrNJpNTM+SezZEv5OgqddFVLlPIF7EdkyRJaPttarUGrWaLIG4RBQFtv03g+/h+6g8hRBontFgsUalUMC0L0zSxDA/TsHBcB6FBJgm+H1CvN1BKUq0u8tDeB5g8sR+AUvcwBgZKxpR7RvA8j4lTB3BzXWzevptHahPMN2cxnRy16hztuVF0vAB01kzqSugoYgRBgIAz7nSeFxGEIWEY4nkeYRDgu276xfsuQRDgBz6FYg7HsZFS4gc+jXorc81PY3IuKZ35fA7PS5cRLIV3TO0WKp2zIMAwTJRO0FpiGGCYEEY+URhxamyM/Y/dn0kLWH/x5eQKPcxPH2Hzzhs4dugZJk8cpKu3j7d98CMcP/Ag8+NPEbfrRM2ZNH7kijDJ9vPtGHQUMYbXb6DZbOG3Wtl8QmqESgOgRFiOjRe6qVgPPYIoIIjatIJCurpdK+IwjZQTxzEiTp1sQyWRSp7RM8SZJYrpPIxhGNlxjBCCRFrEMkSJBEmM2TAIfJ/DzzzJ5ImnATAth6G1W7DcAlff+j4atUVGn3yQrVfcxJatl7PvgQdpt9sA6KR2nlpbgAui8BK37otDRxHD99t0lcsMDQ4iA596vUYrI0m73cZzXULHJS7msIIGYeiSxAGB38Y00liaSRwTZV5XasnfQWczpqRrRbUAhEaIdFmhkU1/Q7bkgAgrtFBhRNTyUSga9QbPHnwKv7UAgFesoLCwbZt8sZtiVx9zC3W6e/pYmJ/FNBzUC86YLvmRuWCuSoxzojo9TataJZ/PU+7upn9ggAEhaLdaNJoNWr6PH8e0oya5nIsXeURRiOflcEwr1QtUOlOq0WcceLXKlDwB6FRRVXaCbZqpM44Qy/wi0gh/ZO58pmmSxAkzM9NMnDh4xjYhpeDB73+Ocv8aNm27lk0b13HDDdeydduljI2dBmVx4JH2OWoqSElhkXYhS+v3OwcdRQwJLGZSYmGximc75ItFusolBoaGSIQm8AP8dpMkDmk1gnTRThDgGFZm21i27P15ba0xhMXSFi1SSaQps24kDQGZyITAD4jCECEVdhbBJwwDTo+dpF2beq6sMiJuzxMHPqXu9eQKHv/nb3yAz/zl3/JPf/s3GTtZ464v/PE5apqRQniAA6aNsFYlxjlx0623sjA/z+jos8zOzlJvNjBbdZx5E8dIRxHd3T1USt0Yhk0cRyTpPh9n4nkuba5nCLFMdwAQGIZC6zCVDEohVWb2DkPiKCLM/D0FAsexcWwHjabVajE3eRwln1MeYz/1n+hbv4M9V7+GyenTbF0/zK4rrmT3tiFGDx2jVVtpxlSA4SHsHnQs0/1TPA/Xy730Dfwi0FHEuOuv/jO7rr6F195yK4bp8uzxUY4cOsTi3CxR4hMFEYvVGoap8bw8hWKOYjGP67oIDUpkjrVSEsl0O4ul7mHJjpHEMXHmWpckSbrBjJTobLWZ0grLTHUHBMgkXU3Wqk0sK6nIuhTBpu2XMrhumF9+22tYbATsufJyXNPgyX33k8T+WTU0gByQT10HPQ/b87DsJf+yzkFHzZWk+64KiuV+dlx+E9e9/k1csusKFhZrPPrwoxze/ziz0zOQBGl0HcvAMExM28EylmJGp5NjWukzMT8TrZ4XYWfJx1IpdWbRj5ISnc2fmKaRBntTOu1emouo5gmeb3/IU6qUeedvfpz9jz+BX59n3fqLuXzPDt7xjlt4881v4OiBHy/Lb5DqE3kwXYSbwy0W03W4poVlmUwfub9j2NFREiOFplmbYd99d/LYg99izUXbuOHmO7j11jv4tV97Kycnxth7316efvgJZiYniOIGhk6ddiUpKQwFSqtUzdCaWMszyuXSH+iMDOmQVicJZCvQhWmmgTTQ6DiCpM7ZRqli7zC//K4P06q3OPrMPqL6DBoXKRJGhjQnjz2R5TRIdYo8mB4IE8vN45aKWLaNla3qd9zO2l6zAyXGysjly1y8Yw+3vPEOXv261zAwOMixU9Ps/fHj7HvoCU4cPUJ1YRoZBIilVepagUxDOKZhqLMIWll4aaQCLUFF2U5KIc9F81qKtrUUFOn52LrrRt72/n/Fd+66i6cfvBPXK7Jl9620m03a1cOcPrpEDAcoguEi3LTrKBaKCNvGskykUrhOqniePvDDjpEY/9MQY1kuCsUym7ds55U3vprrbryJjRdvoSXhyOhJfnjPQ9x71/eYHx9NYxrppehXkL705dGxFM9Fx3px7eAVK7zi5vcgDIdao8rQRVuYm5phcfwwo09+J9NBTKAEdgksCzeXx/O8tPtwHJRKR0WWbWMaBsef/O4qMVbChRHj+TAMi1K5h5E16xgcWotX6OLo0TFGDz6USoozBICfr61AsO3K17HlitcwsvYiNm3dxD3fvpPvf+WTyLhNqkwWQBRTSVEoUCyWMJY80HM5lJJYlnUmBvrU4XtXibESniPGi9kX/eWDYdps3HE9my65jPHRgxx++n5kEgI2GF2AA7aD5Xo4nodtWeTzebQQWLaNbVsYRqpAC0NweN83V4mxEoSwNGYRpCTt71feQbGz4YJVAdvDEAa5rq7UnGWaJFrj5jxyuRyelyOXzxFHEZZlYzs2j/zgcx1DjI4alZjFTcjmBOnKUuB5LjmdQ+BzwwO3H2E6WK6L7dgIQ2CZFq7r4miFaZipS2ESo5qKYqmYLkbqoA8UOkxirKJz0Fkh71fRMVglxipWxCoxVrEiVomxihWxSoxVrIhVYqxiRfz/2hhLBu5TWLgAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIYAAABeCAYAAADmFGzTAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAfm0lEQVR4nO2deZAkV33nPy8z6+jq6rt7Zrqn5+iZ0RxCQgIkTrHCWICEMVoCeS177V0bvF4F4PXG2mvAEAtrY4yx17E24ICwWLQhMNhcRjZouYxsCUlI6B5ppDn7vqu6zrzetX9k9kxrpucQGmnKqL4dFZ2Z71W+6/t+7/d+v19mCWstbbRxMpwLXYE2WhNtYrSxLtrEaGNdtInRxrpoE6ONddEmRhvr4oITQwgxLoS4Jj3+fSHEzc9Dma8TQkw/1+U8GwghbhFCfOQn/O4dQojfeDblX3BirIW19qPW2rM26Nl02k8CIcR2IcQPhBC+EOLJVSKnaZcIIb4thFgWQvzUGIXOKzGEEN75vF8L4YvAQ8AA8AHgK0KIoTRNAn8HvPMC1e25gbX2jB9gHHg/8ASwAnwOyKdprwOmgfcC88CtJGR7H3AEKJF0Wv+a+/0qMJGmfSC9/zVp2oeBz6/JexVwN1ABpoBfA36TZDBioAH8Q5p3BPgqsAQcA/7Lmvt0ALek9X8C+O/A9Nnann53NxABXWuu3QncdFK+XUl3nvFeeSAABtPzDwAK6E7P/xD43+nxLcCngG8CdeBHwM4193o1cD9QTf+/ek3aHcBvrDl/B3Agbf+3gW1nbfc5EmM/sAXoB34IfGQNMRTwJ0AuHYDfBu4FRtNrnwG+mOa/OB3Mf5Om/Xn6/VOIAWxLO+SXgAzJbL18Tad9ZE0dHeAB4H8AWWAHcBR4U5r+sXQw+9N27F9LDOCvgL86TfvfBhw46dongU88U2Kk+f4FeHt6/B2SCXTdmrS3rWljCXg54AFfAL6UpvWng/yradovpecDJxMDuB44DOxL834QuPt8EeOmNedvBo6sIUZMKkHSaweAn11zPkwyw7104L60Jq0z/f56xHg/8PXT1OlkYrwCmDwpz/uBz6XHR4Fr16T9JucuMX4VuPeka38E3PITEuMPgb9M+2OeZCJ9jBPSZHVwbwFuPqnfn1xTp/tOuu89wK+tQ4zbgXeeNIl8ziI1zlXHmFpzPEEitlexZK0N15xvA74uhKgIISokRNHAxvR7x+9lrW2SzIr1sIVkNp0LtgEjq2Wm5f5+WiYnl5u24VzRALpPutZNIs3OCCHEvxdCNNLP7enlfyaZUC8FHgO+C1wNvBI4bK1d2x/za459oJgej6zThglg8zrV2Ab8xZp+KQPiNHmP41yJsWXN8VZgds35yZr4FIlo7F3zyVtrZ4C5tfcSQhRIloj1MAXsPE3aemUeO6nMLmvtm9P0p5WbtuFc8TiwQwjRtebaZen1M8Ja+wVrbTH9XJdevhvYQ7JE/bO19om0Pm8mIc25YJZkwNdiKzCzTt4p4D+f1Dcd1tq7z1TAuRLj3UKIUSFEP4nC9LdnyPtp4I+EENsAhBBDQojr07SvAG8RQlwlhMgCf3CGOnwBuEYI8e+EEJ4QYkAIcXmatkCiR6ziPqAuhHivEKJDCOGm28gr0/S/A94vhOgTQowCv3WO7cZaexB4GPiQECIvhHgb8GISRReRIE+i25DmyZ3hfj6JPvRuThDhbuAmzp0Y3wJ2CyF+Oe2bXyTR3/5xnbyfJmn7i9L69QghfuFsBZwrMf6GRFE6SiLez2RD+AvgNuA7Qog6iSL6CgBr7eMkHfI3JLN4hWRXcwqstZMks+h3SMTfwyQzFeCzwMWpePx7a60G3gJcTrIjWQZuBnrS/P+TRNQeS9tx69qyhBCfFkJ8+gxtuhG4Iq3vx4AbrLVLado2Et1gVYIEwFNnuBckBMiQEHr1vItE+Twr0uXmLSR9UwJ+D3iLtXZ5nbxfJ9kcfEkIUSNRvK87Od/JEKlCcvoMQoyTKDLfO5dKt/HTgZayfLbROmgTo411cdalpI0XJtoSo4110SZGG+uipbyhz53bepX/llNtYyK9tvY/gJt+Mul/Qc/gHt58w400wjLf/MLnwVQw2idx+4Qkbp8MiQdg7b0MiZkjT/fAKANDGzj25B2AS9eGrXgix8rCYayVq1+44GgpYpzAif4RwiWf66PQMYDraaTyMdpgrY9WikjGKKU4dcDX3E0UsTYiGWCVftw0NZ+e50kGMCk7k+0ml82TES6OEATSMNi/g55CH0YKuro2oGUnTV+CzWKFC0aBcMHxQSuwmsQx65OQM0YZS7myapU21JemEG6WVhuKllI+T0iMDJ7Xx+49l3LVq6/hyisvJ1d0GBoaZNvoBoQxlJYmeODhA0zPlSmXa5QXVlhcKlGpzbO8PE2zsYIfNDAGRi56LYsTD6B1bzrsLq7jIoQDbgdGVSl2D7F50y62bRtl65bNbBndTF9fgULeId+Rw81k6O0bYvOWASJpmJ9YJowjFushcehTb4YsLvsslhuUS1OUlnyWlspUFyZo1OZRqoo1iyTksyRkhIQwSa2sjVtGYrQgMQRepo9XXf0Orr3+9fT3eFSaEU3tUinN89bXXcKuzRu5655/4f5Jh47+YTzPw/UcHNclqzWyUmV6apIH77uLJ/ffw4atu/HLs+y8+CrGdu2kv7eHQqHIRaMDbOrv4ns/+CET5SZjYxvZuW0LY1tH2LNrmO2bh3AcgRVrZdg6SLsw8UyCNoYotjT9mFKpwcT0MuPHxjl26CDjRw+xuDjL/Pw85ZV5arUScdwALNbaliFGa8kvwHE6ufKVv8I73nsTg1tzPHXHj4ilg3YcyoHP/Y8cIwoDHnnqCf7poQr9ozvJZD16ejtwHOjId1Ho6KW4dy8/u+Mitjx6KbXqMtncq8gWulmUPjOPz7H3os1MOSUWFwT3P/EU2a6t9A6MsXfvbi7aPsjG/hxOOpnXagoRiavY2uR6HFtUDHnX4gJeBjKuQ7EAxUKBwYEORrb2s3vfFpYrl1JulInDCGKL63hUK3XGj0xy791n9Gk972gxYrgMb3spP3/jv2Vk1wAThx9hfPwY5LsJgfLcMgueR2mggzAUTD3+MLV6nWwux6bNoxSLRao0yHfWKRQK9PUNsOvKl7MwfoSFyUk6cg49mT6qqsn9j/6YKMqye/dLuOnd7+KNr9nDUG8O4Yh1pYMlEfpZEjUzAEIDKxHUqhDWIJLgiZixIcGOTVnKjZjv33eYf/zGP/LQPQ+wODODH5QxpokjcuSyPRR7Cmzeuom9L9r3PPbz2dFixDB4Xp2l8pM0KtuYP3KQ5dljuMU+GnFEda5Mbks/KgrJ5ws4QZXZx/eTLXbhV8r09PdjhENXdx+jW0Yx+SyNuElvTzd+d5GjRw8xv7CAwGXr2D7+41vfwC+86XI29ecR4sxSfDXVI4ku6hRgHejuEiwXYKYI0TxsKnqMDrk8NFHlU5+6lds+/xWqzSpucRByg9A5gI6aOEYSzo7jm63UnYAnDt3L//3Ec92/546WIsZLL3kNc4uzPH7PfezetZuNhUGKl74c5WTIdxcovjbDhv5u/FoFKwOuff21HJo4jO9L6pUl/KCJwiXKlulzPA5MTDA0OsyxgweZPDqJ4+bZtns3b73uGm687kp2jvTgOs98WV/d2K4uLTEWEUrGugRbhzzueWyBP/noX3LH7bdhNm3HG95NtqOXOAoRnsRWy4ioDiLCmCpe33YyG08XlnJh0FLE+Pif/gnTk3N0FrMsl44yPDLC0I495HI5pIrxowZGB0zceRc/uPmzmIFRrr76lXi5HL52wLF41mFo43aGd1/Ezbfexre/8lVUpBnZtpu3Xf9z/KdfeSMXbenDdQRnERJnhoWGhQVpWZmP6fEMo0M57nxwhj/+0If44T/djvU2QKOOqTWQuTx4GZzuPoTjgJHghBi/TOT7qCSco2XQUsTYv/+7NIMAO5Phvrvu5qUvfQkDg110FvNkXRcbNHEE3PmNrzJRKiFXKrxkrI9dF4/Q6RlmF2KC7CYOP/YUP/rsF6mUlskV+nnVVW/gv73nRt7wmr3ks95xQqzux54pP6yFpoXpqmWxHNKrJNu3Fblr/yL/62Mf5Yff/yrW3QQ6hpUSYMB1IVekr6sH4TisaJtIHl1noK+HgdEdZyv2eUVLEePLt96CtRlc18MRgu9/91sIa3GsZWCgj/7eHoa68zy2sEQVcI0maFbwMlswto8FP+LH9z/KwvQ01rh0bx7mnb/+Dn73phsYHiyyVkSsLgVr7Z3nQhBrQVpYblpKcwE52WTXrgEeeWqFz37iU/zz7Z/Hun2gZKKEuC54GoTGzTTpokat6iNUBIBDyL7tLrv3dJ73/nw2aCliTB2eQTuCVdOK1hrHOPjGIbLHsAIcDFob8pkOhvIduE4/9x4OeOLJCSanVxBOsiPZs++VfODD7+Hnrn4xWc9FiKfbRlePTfpZ7YgzkWPVLLUUWWorMU5Q55K9gxydDfjqV27jW1/+DEb0gXEBCcKCcMC6YAz9XV3ccP2LufvHx/jR/YdBgFExd337Do4dXIIP/Nfz2p/PBi1FjChycNzEUKS0QlmB43lkij2MDo9y0c497Nm7h4svuZhtW0Y5dOAwf3/7bUwfLtOolijkI7q7Bxkd3cV7futGXv2S7bhuIhMsJ7ahqxLCB2ok3o2e9P/Z0LSWejNC1cu87JKNTMxL7rr3Qf72//wxURCyc9+lbB0dY3lphampI9RqixhVAxzCFcNtX/46Sw0Hwjg1mUOzssD4ucbDP09oKctn3hG24BUZ2biNy/a+mFe85lVcfOUlbL9oB5uGN5DPZ3E9ByEEgR8QxxI/CHn88UPc+YMf88TjxxCey3e//yWslYzu3M0br7uen3/b29m6bZS+rgydGcgIsAgCAU2S2dHDWuN0grVEMtYSKaiFkkMHp7ls32ZWGpYHHpnkzz76e9xzxzcY3ryVr9/2D1z6on3I2DA/t8R9P3qQWz53M/9y53dQ6fJx4u72aefWmpaxfLYUMd510/vsdW98I1e8/DIGhrrJZBOBtp6NYbXeQojjx0ppfD/myOFJHrjvYQ4cmGBq6ghxLNl3xVVc8bPXsWFDJ4M9efpyhnwGchmPbNbFFQIjkmVs1SWXIyWHgJq0PHm4QrSywIv2bUW5OR55Yol/+Ptb+fSffxzw+eAf/Clvfvt/IIoVVlhc1yPjCjJIbvncZ/nkxz+Ifho5TmlTmxjrwRhrnZ/ArrAelhaX6SwWadYD5mcXmJmcI4yhqVyWFpdRfpU4apLN58h3ddDTnePifbvZvHmYTLGIbzyEcRgsCrKew8x8la99416uunIf2/aMcuBog4fvu5ePffh9uF4P7/rtX2fjlr1I4yKlRkqFVqCNJjaSjOfxmT/7XY499eN1aisAB2tVyxCjpXSM80UKgMGhxGBUKOQZ3NDLJZfvQSlNbaXBxNFpjh6ZZGJ8hgP7j/LgQ48TyQaDQ90Mbugl35ln6/Y9dHcP0j/ST2wdFqdWuPb1VzC6c5i77p9hYXGOb9/+ZWZn9pPvyDM+83pqocExAhlLpIyI44g4iggaDYIgwMpEzXXdDI5XoNjdQ7FrA8OjuxjYuOu8tf18oKUkBmcKqjjfBVmLMZYolCwsljl0eJ6FhRLTU0tMTU5y6NBhyuV5OorDXPGqK3nnr72Z4dEN/PCRMocOHGFq8hC3fPJ91CrzIASbt+6md7CPgtdFId+bxGOokDAMiRo+2b4RRi++HLdjkJ7BIQodHTiZHCaKkGFIHIfc/PFfaUuMCw0hBK4rKHTmGBsbZmxs+LiuYi3EsSaKIqTSGOFRqmu+d9cxZmcr1KoVpiamAI9i1ybCsE6lWmPnZa9hZNNWstluVCxpVmtIGeM6DgOjO3E7OwnjBrX6Eo0VB60MRmusMbTYBH3hSoxTCrZJ8cqAHxmqvma54rO03GC5FFGqNAmbTaJalaXKMr7vY2MoLy9x7Oh+lueO0D+yieHRnfT3D9JR6CSXL6KkJIxirDYYCwqBMQbHOFhrkdqgrcVxBN+45XfaEqMVYK3FWIgV1Jox00sx86UGtVpEFFqkjFFxgJSSOI6RcUg9bGKsJIyaOMbF9Vz6B4YR1oCFsBlQ96o4jqC3pwuT8YhkSBxZlDJYq9HGoNL/ruOi1GpUV+vgBUUMaxNTV6wsNd9SqsaUKiFhaKlU69SaEik1YLEmIYbVMhH31uIIh0JnkUw2jyCXWLwLTdzOHJ19PWityWUyZDJZHOGilCSbzdHd3U1ZNpEyQmuNEAKlFFEUMjY6yuzkJFEUnrX+zyd+6olhbWKcCiJLqSKZKcVU6hG+r5HSYK3BGEMYRhhjwJ4ICPY8DyMEwrXgaZycIWtBa4OTzWO1otBRxC90EnZ1opTCNWCNQcYBpZl5MtkMTSnx/RDfjzAatJZ05hyClTIPHHmCnJd5dp7e5wA/dcRIVIUk9jKUsFSNmFwKWVhWBL7GyCAN11sNwE3eIOO6Hl7GSZxp6ShZLFpplFIoGSLjmCiKCIKAWqlEvVJFS0WjXqHeLGGtQQcRRmscx8Uag1YKg0Vrg9YKozVSSpqOJZvN4mIwKn7GHt7nGj81xLAWtLU0A8vSimS5ElGtQiUIieMYI8FaBxwHV7jgmiSAWDg4InHFOyL100hJ4Dep1WpUS8uUSyUaK2WiZiPZqUhJGIQYrXCEQxg2kLqWSBKz+uyKC46XLEEWHGPAaoSRWKMxRhDKJlZptKUtMZ4pTt41WQtRLNFaIYTAD2KktlSbhtlFxUrdEMUSYyzGpjEP1gPHw3NdXLeDTCaDzBlE1iUrIKsUftOntLjA3OwM5aVFgmadWrWKDJpoJUGBiTX1eg0hXCC5vzEGrWKMVamBTiSPJWCxSmKNQRmDsRZrDUoptDZJW0xyjgBj2srnaTE7XyKOYpqNCL8Z4wcBEQ6R9NFKs1KJ8TLZZK02EZlMDm0M9UbAfN0wc3SKsa3b2bF7D8IRiTRwHLxMhkwmTzaTIZfLkMs7GBSVaoXpyUnmx49QKi0TNqtJ+J3RWBUho5hIJY8DoCTLi3PMzk6yccMI+XxCMItBOBZhEj+L1gqz1i5hbUqGxJO6SibSJSyOY4QQx9NbBS1FjL/+yqP0Fju4dNcQ5RXwRS/CkbzhVRfR2ZlhsabZ//gMhcAnT4TTtQm/rsjlGnidTXLkmZqYZfuuF5Fxs3gZD8/1cAsuhbxHV84hjFc4fGicqYOHWZ6fJ44SnUBpjdESrRQyCLAySnSLdHajNd35TrIjY2Q8D6U1oLFaYU0y2NZYLBaMxZpEqTXGIK1BaZXoLxaMTWwXWmukSr6PMBey609BSxFj+1AX+/aMsKkvz90rE2RFSHNpjoP7Bb17xjg6vcLSSg1VqTJz19dodI8xPPZigjCgETU58NhBXvv663DdDJ6XIZ/Pk8vlsI5PeW6Chw8eYnpmkmazCSrGFZDL5QhljNYKx3FRMkRrjVEapTTGGpRUCG2w2uAKF6MNURDhee5x6bB2xq8SQmuN1prQqNSYpVCptDBKI+MYlUoYY9sS47QQtQa9ucQj+tijD9EoLRNWGkxMlNhRE9z1nW8xNNTDxk1jbNt7Ofc+NYU7P8Pc7BzL1So/c81bGBwexM05ZFwIm8scPTTD7OQh/GqZ2A8SRdQYPJdkKTAKJyOw2hBGEVJLtNHHdzZC20RBVAqjExO21hopY4TNJOfGJMsNYIRNpY9BSolUklgrlFJIrdAkS4tjQBuJwWDQnHhksTXQUsQYGdtJZ3+Bw0dLlMt1dNPyyjf9An5Y577v/IDXvu6V+G6RDjdLx/bNeIv/j4cevJdNIzu5/u2/RHdvD8ZTVCszHDw6TmVxhmazgY4VKk4efl5d33EgJyCOQ/xmnSD0CYIqQdRES4krPLKZHC6dCJPOcCmPSwIpFUI4WBIiKCXRWhMZjdKJTrFanpRJmrUGbTU6jfiwKJLAQk3yHtzWQUsRYyU0zJY1gUlE9OzsNMsTh4mtz7XXvpRHD03TEF1s3TDE9771HZYWZ7n6525g65bdOKLJwvwxpseP0FhegDDGWEscBCijiaXEpn8OAhNJmrUqK7VlFpeOUS7N4/s1YhVDatcodHSzsW8Hfd1DGGOJozgZZGOIooimDNHWgLE4Klk+YpuUZdIdh9IKk5LBYjjxtH1iYU2MaR7J27ZbBy1FjEZjnv6hLWjRTTaXZeO2UQxN5mZneGD/Qfo3jBIFh3jsrmUuecXPcPXP/zJCN5k++iilI4eorlTQKkLJJA5Cm8R/YYxBm0SMa0fjxopavcLk9CEWFieQKjilLkbFVOvL1BorbOjfQn9xBIxHFEXENlVWVbrDSBVOpRRSKbRWaGvQVmGOE2GVFJrkFQxZhCjgeBkcz01f09A6aCliDG/px9ENGrUye8e2MzE+QbXpEzs5hCfRusGlL7mU7sHtuDhM7n+A6cNP4pfnMLE5TgBrFNpotNI4TvLSFGMTK2QsfWYXp5maeoIwrJ21TtZqFsuTGJmlM9ODNppQyzSeI1lWVpVNpRXaagwqXSbWSgcH6ECIDrxsB57rgY2QagUZ1sC2lo7RUm73Q8u+PXx0jiNHZwlLS/h+CB3dFPs3MbRhmGImS225xPjB/Rx45H6QGhMDOk68lVqfUBxJtoyO4yTv0dGaRq3GxPxBpheewphnNhA5r5/u/AgWS7jG9pAsFYkCmUiHmOSNOqsPJWRAZPAyBTK5ToSjUfEKMixhrXxaGe2Yz9PgkcnYup4g0pYg1FSrIc2qz0qpzOLiHEszx2gsllFBncBvEvkB+Uw23S6G6SwWYAUm3UJak2w3G0GTidmnmC8dwtpnbjMQ5OjMbkEIhzAOUk9tQohTpINIdAbP7SSby4OrULKGiqsYHXE6F3srEaOllpJ7fvAIkZLIOEIHdQLfp16t4TebxHGIknVErNFSpcH3mjCqJ/YEGyc2BwVWOyijiWKJiiRBvcb0yiTL1XGSmXw6nBzSfwIWRRD7JHSQqSK5uqNI9AbH6cDJdONl8jiOwcoaUbiA1sFp79uqaCliLE5NJFs8LTFxnSgMCYIArRRIhacscaQwSiGsJetkqDdDtI7QtoEjEvO11hpjLaFxIJKs1Gcp1cY5HSlyuSKQQekojb2Q6+Q1aGqcIEJCBiGyuJlu3Fw/riuwskEcTqKVn+b514mWIoYfLifrdiyxkSQKQ6I4TlzVcQwy+a9XLYtKkc1kkcQ4ZBJ7s1IIAUpqMsqyEjWZrU6uu3wIBF2ZDrCCWrySXnUodvQTRBX00/QQS/LsmgWyuF4vucIgjpfBap8omCOKV4nzrx8tRQwVBCglUbHCRgotFSaWqYFIolQzSU+dUqtmaG2Sh4atscevSymJVcjSygRSrRcdJSh4RTpMRE2f2K729G6iI9+JqMXU/afvWoSTIZvrJ5/rRTgW3y8j6xWsbS3j1PlASxFDhhIlk4G3sUqO4xgVx2grUTpMtqFGpmZnfXzLaEljONNrsYxZ8WtU60unKc3BV01iLDJd/zs6utm27RKOHX6YRtA45RuZzj4whnrtGMa0Vije+UZrESNKPJoyjtFxlNgd4ih5qstIlAox1iTnWiVheykRViO3pFQoqQnjmKXyAnZd55QDGCyW1Q2jwMPNFBk/+jhNv4a1GZL35ZxAXJ8/+UY/tWgpYugwRqdhdErXjzuhlJbJgKe+ByVl6vY+4ck0OvWExhYZWxqBT+BXTlPSqW8ItmgataXkunCTLWeLWSOfT7QUMaSMjxNAapWE7MtUx1CJNVNJ9TRnlk4juIE0NtOilaAZVE4jLWCVFI6bw+gTfgtHJDF2wsmT9XoIQp9/bdvM84WWIsbU+INkO7vwMn1YEx0nhVIStUqY9HjVSbUajg/Ji1YUFisEgTrdjxwKHMdly/Z97L301dz5/W/iN6YBl66OQTZvGWOuVEWbmCB8YZICWszyecmufVbJgEZsGRnaTke+ABZimSiliaRIA2hSYhhjkrdyp6FyCkMcSZbrk9h1/A+OmyHX0U131yBGG0rLM2nkVcipb+V6fvumbfk8DYKhi6nOTFFe2M/84gIduR66O3spFgpkvOxxRXM1vmFt1NTquRaWSEbrkgLAdfIIHGrVRcKghmNd0pBhhJOh0LmBZmMufb7khYuWIsYrxl5MtONiFkqXUVtaoF5vEodNlv0ynfkMWR2fMHClW1SsRZvEhqG0QmEIzalu9FVI6SPl6jIjEHRiqQEuF7/sBnbteBnf/NqHUfLU7eoLCS21lHTm+mx3zwb6ejZQyBdxHRdpLWEcEQdNglopjZRKPZrWoHR6jj4e/3DCj3FmuF4XrltECJ/NO1/NFVe9lXu/eyuTRy/Me71baSlpKWKc+FkKgSNcPOFihYvASQJoSZ7NsDYZfLvuD9OcU0l09G1n48hlzBz+J15+1Vt57Rt+kS/89YeYOvLQT3jPZ482MU6D5+4Xjk5FZ992enoGmB1/gN6BrURhnaC5cvYvPodoE+M0eD6J0YpoJWK0fyyvjXXRJkbLoGWEBdAmxgVG8hrHBK21iraJccHgsOrlbUW0lIHrhYO1P4Wz9lrroE2MC4JTlw3vPL789nygTYwLghPR6DnPYctgLxcN9V7YKp2ENjGed5yQDHkvz2h/F5t7cmRFa8WNtg1czwMEAtf1kscn1+nvjOOQd6EW65ZZT9rEeA6Rcz1G+7rYNbSRzkKRcqPGg8cmCJRBGnlK/layfLaJcR4hAFc4dBcKbOztpBPN9v4ivV2DxLEkjmLmSlUqkaJBA20clpsRkdLJq5dM6/yQTVvHOA8QQF9nnr5inh4yXLZnlJ6ih5SC5VKVcm2FSrXBwGAfw8O9DMQhpbImDhUjm/opdBWRyr3QzXgaWkpitNE6aFs+21gXbWK0sS7axGhjXbSJ0ca6aBOjjXXRJkYb6+L/A8aJFFE6przhAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qWnLUKtcV1TC",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 66
        },
        "outputId": "79746a1f-f707-422f-cc58-648ed59964eb"
      },
      "source": [
        "#print(confusion_matrix.diag()/confusion_matrix.sum(1))   # Acuuracy per class \n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "nb_classes = 2\n",
        "\n",
        "# Initialize the prediction and label lists(tensors)\n",
        "predlist=torch.zeros(0,dtype=torch.long, device='cpu')\n",
        "lbllist=torch.zeros(0,dtype=torch.long, device='cpu')\n",
        "\n",
        "with torch.no_grad():\n",
        "    for i, (inputs, classes) in enumerate(dataloaders['val']):\n",
        "        inputs = inputs.to(device)\n",
        "        classes = classes.to(device)\n",
        "        outputs = model_conv(inputs)\n",
        "        _, preds = torch.max(outputs, 1)\n",
        "\n",
        "        # Append batch prediction results\n",
        "        predlist=torch.cat([predlist,preds.view(-1).cpu()])\n",
        "        lbllist=torch.cat([lbllist,classes.view(-1).cpu()])\n",
        "\n",
        "# Confusion matrix\n",
        "conf_mat=confusion_matrix(lbllist.numpy(), predlist.numpy())\n",
        "print(conf_mat)\n",
        "\n",
        "# Per-class accuracy\n",
        "class_accuracy=100*conf_mat.diagonal()/conf_mat.sum(1)\n",
        "print(class_accuracy)"
      ],
      "execution_count": 236,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[217  13]\n",
            " [ 30 200]]\n",
            "[94.34782609 86.95652174]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rDzFgcICcP-9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "\n",
        "\n",
        "def plot_confusion_matrix(cm,\n",
        "                          target_names,\n",
        "                          title='Confusion matrix',\n",
        "                          cmap=None,\n",
        "                          normalize=True):\n",
        "    \"\"\"\n",
        "    given a sklearn confusion matrix (cm), make a nice plot\n",
        "\n",
        "    Arguments\n",
        "    ---------\n",
        "    cm:           confusion matrix from sklearn.metrics.confusion_matrix\n",
        "\n",
        "    target_names: given classification classes such as [0, 1, 2]\n",
        "                  the class names, for example: ['high', 'medium', 'low']\n",
        "\n",
        "    title:        the text to display at the top of the matrix\n",
        "\n",
        "    cmap:         the gradient of the values displayed from matplotlib.pyplot.cm\n",
        "                  see http://matplotlib.org/examples/color/colormaps_reference.html\n",
        "                  plt.get_cmap('jet') or plt.cm.Blues\n",
        "\n",
        "    normalize:    If False, plot the raw numbers\n",
        "                  If True, plot the proportions\n",
        "\n",
        "    Usage\n",
        "    -----\n",
        "    plot_confusion_matrix(cm           = cm,                  # confusion matrix created by\n",
        "                                                              # sklearn.metrics.confusion_matrix\n",
        "                          normalize    = True,                # show proportions\n",
        "                          target_names = y_labels_vals,       # list of names of the classes\n",
        "                          title        = best_estimator_name) # title of graph\n",
        "\n",
        "    Citiation\n",
        "    ---------\n",
        "    http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html\n",
        "\n",
        "    \"\"\"\n",
        "    import matplotlib.pyplot as plt\n",
        "    import numpy as np\n",
        "    import itertools\n",
        "\n",
        "    accuracy = np.trace(cm) / float(np.sum(cm))\n",
        "    misclass = 1 - accuracy\n",
        "\n",
        "    if cmap is None:\n",
        "        cmap = plt.get_cmap('Blues')\n",
        "\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
        "    plt.title(title)\n",
        "    plt.colorbar()\n",
        "\n",
        "    if target_names is not None:\n",
        "        tick_marks = np.arange(len(target_names))\n",
        "        plt.xticks(tick_marks, target_names, rotation=45)\n",
        "        plt.yticks(tick_marks, target_names)\n",
        "\n",
        "    if normalize:\n",
        "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
        "\n",
        "\n",
        "    thresh = cm.max() / 1.5 if normalize else cm.max() / 2\n",
        "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
        "        if normalize:\n",
        "            plt.text(j, i, \"{:0.4f}\".format(cm[i, j]),\n",
        "                     horizontalalignment=\"center\",\n",
        "                     color=\"white\" if cm[i, j] > thresh else \"black\")\n",
        "        else:\n",
        "            plt.text(j, i, \"{:,}\".format(cm[i, j]),\n",
        "                     horizontalalignment=\"center\",\n",
        "                     color=\"white\" if cm[i, j] > thresh else \"black\")\n",
        "\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.ylabel('True label')\n",
        "    plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))\n",
        "    plt.show()"
      ],
      "execution_count": 237,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KkF-UlS-e2un",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "outputId": "7b5de4b6-3ddc-495e-89f8-92a535d7674d"
      },
      "source": [
        "plot_confusion_matrix(cm = conf_mat, \n",
        "                      normalize    = False,\n",
        "                      target_names = ['high', 'medium', 'low'],\n",
        "                      title        = \"Confusion Matrix\")\n"
      ],
      "execution_count": 238,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NLldD-dRub8L",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Gi8XPyU7vveV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
